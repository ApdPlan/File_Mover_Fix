#!/usr/bin/env python3
# -*- coding: utf-8 -*-


import os
import shutil
import pickle

current_folder = os.getcwd()
preexisting_files = []
folder_handling = {}
dict_key = 0


def save_data_check(folder_handling):
    save_file_loc = current_folder + "/FileMoverSaveData.pkl"
    #  Handle confirmation and (if necessary) creation of save data file.
    if (os.path.isfile(save_file_loc)):
        print("found save file")
        with open(save_file_loc, 'rb') as open_file:
            folder_handling = pickle.load(open_file)
            open_file.close
        print("post load folder handling: ", folder_handling)
            
    else:
        with open(save_file_loc, 'w') as init_file:
            init_file.write("")
            init_file.close()
    #  Add location where directories will be created to the save data or confirm if the location needs to change.
    if (len(folder_handling) == 0):
        global dict_key
        folder_handling[dict_key] = input("Please choose a location where folders will be created. \n Destination: ")
        dict_key += 1
        print(folder_handling)
        with open(save_file_loc, 'wb') as save_file:
            pickle.dump(folder_handling, save_file) #(FolderHandling, save_file)
            save_file.close()
    else:
        print(f"Folders will be created at {folder_handling}. Is this correct, y / n?")
        if (True):
            pass
        else:
            pass


def enter_term():
    search_term = input("Enter a search term: ")
    #print (f"The term {search_term} will now be used to search the designated folder and move all items to a different location under that name.")
    return(search_term)



def make_folder(search_term):
    added_folder = current_folder + "/" + search_term
    if (os.path.isdir(added_folder)):
        print("folder exists")
        pass
    else:
        print (f"Folder named {search_term} will now be created in {current_folder}.")
        os.mkdir(added_folder)
    return added_folder


def search_folder(search_term, added_folder):
    search_report = os.listdir(current_folder)
    found_title = 0
    not_found_title = 0
    total_folders = 0
    duplicates_found = 0
    files_moved = 0
    for i in search_report:
        if (os.path.isfile(i)):
            if(search_term.lower() in i.lower()):
                print(i)
                found_title += 1
                new_file = added_folder + "/" + i
                if (os.path.isfile(new_file)):
                    preexisting_files.append(i)
                    duplicates_found += 1
                else:
                    files_moved += 1
                    shutil.move(i, added_folder)
            else:
                not_found_title += 1
        else:
            total_folders += 1
    print (f" Total files found: {found_title} \n Total files scanned: {found_title + not_found_title} \n Total folders found: {total_folders}") 
    print (f" Total files moved: {files_moved} \n Total files that may be duplicate: {duplicates_found}")
    if (duplicates_found > 0):
        print ("The following files appear to be duplicates: \n", preexisting_files)
    
    

def copy_files_to_folder():
    pass
    

def main():
    save_data_check(folder_handling)
    search_term = enter_term()
    #added_folder = make_folder(search_term)
    #search_folder(search_term, added_folder)


main()
